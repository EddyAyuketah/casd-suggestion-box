import pandas as pd
import PyUber

from datetime import datetime

outs_goal = 8000
quarter_goal = 67900
deadline = datetime(2025, 11, 3)

commit_ww = 202552
ssafi_lsb_operation = 185006
segment_day_end = 68

lineview = r"\\azshfs.intel.com\azanalysistop\AZAnalysis\1274_MAODATA\AZFSM_Production\COS_DB\Combined\LineView.TXT"
df_lineview = pd.read_csv(lineview, sep="\t")

ssafi_lsb_fls = df_lineview.loc[df_lineview["OPERATION"] == ssafi_lsb_operation]["FULL_LOOP_SEQ"].values[0]

# don't forget to update the start date!!
quarter_ships_sql = f'''
SELECT
  SUM(WAFER_QTY)
FROM
  F_LOT_RUN_CARD
WHERE
  OUT_DATE >= TO_DATE('09/06/2025 18:00', 'MM/DD/YYYY HH24:MI')
  AND (LOT_TYPE = 'PROD' OR LOT_TYPE = 'ENG')
  AND LOT LIKE 'L%'
 AND OPERATION = {ssafi_lsb_operation}
'''

quarter_ships = pd.read_sql(quarter_ships_sql, PyUber.connect('F32_PROD_XEUS')).values
quarter_outs_remaining = quarter_goal - quarter_ships[0][0]
days_till_deadline = (deadline - datetime.today()).days + 1

quarter_volume = (df_lineview
                  .query(f"FULL_LOOP_SEQ <= {ssafi_lsb_fls} & OPERATION != 204")
                  .assign(PP_INV=lambda x: x.iloc[::-1]['INV_PROD'].cumsum()[::-1],
                          PP_W=lambda x: x["PP_INV"] // quarter_outs_remaining,
                          PP_mod=lambda x: x["PP_INV"] % quarter_outs_remaining)
                  )

quarter_volume_pp = quarter_volume.query("PP_W == 1").tail(1)
quarter_bump_inv = quarter_outs_remaining - quarter_volume.query("PP_W == 0").head(1).filter(["PP_mod"]).values[0][0]

segment_days_till_deadline = segment_day_end - quarter_volume_pp['SEGMENT_DAY'].head(1).values[0]

ahead_behind = days_till_deadline - segment_days_till_deadline

print(f"""
      Quarter outs remaining: {quarter_outs_remaining} 
      PP is SD{quarter_volume_pp.filter(['SEGMENT_DAY', 'OPERATION', 
                                         'OPER_SHORT_DESC', 'CEID']).to_string(index=False, header=False)} and {quarter_bump_inv}w remains from PP 
      Days till deadline: {days_till_deadline}
      Segment days till deadline: {segment_days_till_deadline}
      Ahead/Behind: {ahead_behind} days
      Shiftly min outs to hit goal: {round(quarter_outs_remaining / days_till_deadline / 2, 0)} 
      Weekly min outs to hit goal: {round((quarter_outs_remaining / days_till_deadline) * 7, 0)}""")

outs_remaining = outs_goal - df_lineview.loc[df_lineview["OPERATION"] == ssafi_lsb_operation]["CW_OUTS_PROD"].values[0]

pp = (df_lineview
      .query(f"FULL_LOOP_SEQ <= {ssafi_lsb_fls} "
             f"& OPERATION != 204")
      .filter(["SEGMENT_DAY", "OPERATION", "OPER_SHORT_DESC", "CEID", "INV_PROD"])
      .assign(PP_INV=lambda x: x.iloc[::-1]['INV_PROD'].cumsum()[::-1],
              PP_W=lambda x: x["PP_INV"] // outs_remaining,
              PP_mod=lambda x: x["PP_INV"] % outs_remaining)
      .query("PP_W == 1 & INV_PROD != 0 ")
      )

pp_operation = pp.query(f"PP_mod == {pp['PP_mod'].min()}")

pp_before = (df_lineview
             .query(f"FULL_LOOP_SEQ <= {ssafi_lsb_fls} "
                    f"& OPERATION != 204")
             .filter(["SEGMENT_DAY", "OPERATION", "OPER_SHORT_DESC", "CEID", "INV_PROD"])
             .assign(PP_INV=lambda x: x.iloc[::-1]['INV_PROD'].cumsum()[::-1],
                     PP_W=lambda x: x["PP_INV"] // outs_remaining,
                     PP_mod=lambda x: x["PP_INV"] % outs_remaining)
             .query("PP_W == 0 & INV_PROD != 0 ")
             )

bump_inv = outs_remaining - pp_before["PP_INV"].head(1).values[0]

print(
    f"\n Current Week PP is SD{pp_operation.filter(['SEGMENT_DAY', 'OPER_SHORT_DESC', 'CEID']).to_string(index=False, header=False)} and {bump_inv}w remains from PP")
